group = 'host.exp.exponent'
version = '0.2.1'

configurations {
  api
  implementation.extendsFrom(api)
  configurations.maybeCreate('default').extendsFrom(implementation)
  testImplementation
  androidTestImplementation
}

dependencies {
  implementation project(':expo-json-utils')

  testImplementation 'junit:junit:4.12'
  testImplementation 'androidx.test:core:1.0.0'
  testImplementation 'org.mockito:mockito-core:1.10.19'
  testImplementation 'io.mockk:mockk:1.10.6'

  androidTestImplementation 'androidx.test:runner:1.1.0'
  androidTestImplementation 'androidx.test:core:1.0.0'
  androidTestImplementation 'androidx.test:rules:1.1.0'
  androidTestImplementation 'org.mockito:mockito-android:3.7.7'
  androidTestImplementation 'io.mockk:mockk-android:1.10.6'

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${safeExtGet('kotlinVersion', '1.6.10')}"
}

if (System.env.MAVEN_EAS && !System.env.GENERATE_AAR_ON_THE_FLY) {
  def aarFile = fileTree(dir: System.env.MAVEN_EAS, include: "**/expo-manifests/${version}/*.aar").getFiles()[0]
  if (aarFile) {
    ext.isAarProject = true
    configurations.maybeCreate('default')
    artifacts.add('default', aarFile)
    return
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

buildscript {
  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${safeExtGet('kotlinVersion', '1.6.10')}")
  }
}

// Upload android library to maven with javadoc and android sources
configurations {
  deployerJars
}

// Creating sources with comments
task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

// Put the androidSources and javadoc to the artifacts
artifacts {
  archives androidSourcesJar
}

uploadArchives {
  repositories {
    if (System.env.MAVEN_EAS) {
      maven {
        name "mavenEAS"
        url System.env.MAVEN_EAS
      }
    }

    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: repositories.find { it.name == "mavenEAS" }?.url ?: mavenLocal().url)
    }
  }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 30)

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 30)
    versionCode 31
    versionName '0.2.1'
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  lintOptions {
    abortOnError false
  }
  testOptions {
    unitTests.includeAndroidResources = true
  }
  sourceSets {
    androidTest.assets.srcDirs += files("$projectDir/src/androidTest/schemas".toString())
  }
}

repositories {
  mavenCentral()
}

afterEvaluate {
  if (System.env.GENERATE_AAR_ON_THE_FLY) {
    bundleLibResDebug.finalizedBy(uploadArchives)
    bundleLibResRelease.finalizedBy(uploadArchives)
  }
}

task uploadExpoArchives {
  dependsOn(uploadArchives)
}
